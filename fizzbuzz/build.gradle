import java.util.Arrays
import java.util.List
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths
import io.ghostwriter.GhostWriterClassFileTransformer

apply plugin: "java"
apply plugin: "application"

repositories {
    mavenLocal()
    mavenCentral()
}

// Instrument classess with detailed logging
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "io.ghostwriter:ghostwriter:0.8.0"
    }
}
task instrument(type: JavaExec) {
    main = 'io.ghostwriter.GhostWriterClassFileTransformer'
    args = [sourceSets.main.java.outputDir.absolutePath]
    // Supply configuration. In this case, disable value assignment tracking.
    jvmArgs = ['-DGHOSTWRITER_TRACE_VALUE_CHANGE=false']
    classpath = buildscript.configurations.classpath
    classpath += sourceSets.main.runtimeClasspath
}
compileJava.finalizedBy instrument

dependencies {
    // In order to actually capture and use the events that GhostWriter triggers a runtime implementation needs to be provided.
    // The GhostWriter stub check the classpath for TracerProvider implementations. GhostWriter will use the first one it finds.
    // If no implementation was found on the classpath, the default no-op will be used.
    runtime "io.ghostwriter:ghostwriter-rt-tracer:0.5.0"

    // SLF4J dependencies for providing the output generated by GhostWriter tracer runtime
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.13'
    runtime "org.slf4j:slf4j-simple:1.7.13"
}

ext {
    mainClass = "io.ghostwriter.sample.fizzbuzz.FizzBuzz"
}

jar {
    manifest {
        attributes 'Main-Class': mainClass
    }
}

// Trace level setting required in order to see the output from GhostWriter
applicationDefaultJvmArgs = ["-Dorg.slf4j.simpleLogger.defaultLogLevel=trace"]
mainClassName = mainClass
